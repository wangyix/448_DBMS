options {
	JAVA_UNICODE_ESCAPE = true;
	STATIC = false;
}
PARSER_BEGIN(SQLParser)

	package parser;
	
	import java.util.*;
	import ast.*;
	import database.*;

	public class SQLParser {

	}
PARSER_END(SQLParser)

// Lexical definitions --------------------------------------------------------

// whitespace
SKIP :
{
    <" "> | <"\t"> | <"\n"> | <"\f"> | <"\r">
}
// Comments
SKIP :
{
    < "--" (~["\n"])* "\n" >
|	< "{" (~["}"])* "}" >
//|   < "/*" ( ~["*"] | ("*")+ ~["*","/"] )* ("*")+ "/" >
}

// SQL keywords
TOKEN [IGNORE_CASE]:
{
	< KW_AND: "AND" >
|	< KW_OR: "OR" >
|	< KW_CREATE: "CREATE" >
|	< KW_CHECK: "CHECK" >
|	< KW_PRIMARY: "PRIMARY" >
|	< KW_FOREIGN: "FOREIGN" >
|	< KW_KEY: "KEY" >
|	< KW_REFERENCES: "REFERENCES" >
|	< KW_DROP: "DROP" >
|	< KW_TABLE: "TABLE" >
|	< KW_SELECT: "SELECT" >
|	< KW_FROM: "FROM" >
|	< KW_WHERE: "WHERE" >
|	< KW_INSERT: "INSERT" >
|	< KW_INTO: "INTO" >
|	< KW_VALUES: "VALUES" >
|	< KW_DELETE: "DELETE" >
|	< KW_UPDATE: "UPDATE" >
|	< KW_SET: "SET" >
|	< KW_HELP: "HELP" >
|	< KW_TABLES: "TABLES" >
|	< KW_DESCRIBE: "DESCRIBE" >
|	< KW_QUIT: "QUIT" >

|	< KW_INT: "int" >
|	< KW_CHAR: "char" >
|	< KW_DECIMAL: "decimal" >
}

// SQL symbols
TOKEN:
{
	< SYM_PLUS: "+" >
|	< SYM_MINUS: "-" >
|	< SYM_STAR: "*" >
|	< SYM_SLASH: "/" >
|	< SYM_EQUAL: "=" >
|	< SYM_EXCLEQUAL: "!=" >
|	< SYM_LESS: "<" >
|	< SYM_MORE: ">" >
|	< SYM_LESSEQUAL: "<=" >
|	< SYM_MOREEQUAL: ">=" >
}

// SQL identifiers
TOKEN:
{
	< IDENTIFIER: ["a"-"z", "A"-"Z"](["_", "0"-"9", "a"-"z", "A"-"Z"])* >
}

// literals
TOKEN:
{
	< INT_LITERAL: (["0"-"9"])+ >
|	< DECIMAL_LITERAL: (["0"-"9"])*"."(["0"-"9"])+ >
|	< STRING_LITERAL: "'"(~["\\", "'"]|"''"|"\\'")*"'" >
	// does not allow escapes except for escaping a single quote
}
/*
TOKEN:
{	< COMMAND_FOLLOW: ";"([" ", "\t", "\f", "\r"])*"\n" >
|	< COMMAND_FOLLOW_ERROR: ";"(~["\n"])*"\n" >
}
*/


// Grammar --------------------------------------------------------------------

Command Command():
{
	Command ret;
	//System.out.println("Command()");
}
{
	(		ret = CreateTable()
	|	ret = DropTable()
	|	ret = Select()
	|	ret = Insert()
	|	ret = Delete()
	|	ret = Update()
	|	< KW_HELP >
		(
			ret = HelpTables_suffix()
		|	ret = HelpDescribe_suffix()
		|	ret = HelpCommand_suffix()
		)
	|	ret = Quit()
	)
	";"
	{ return ret; }
}

// CREATE TABLE ( ... ) -------------------------------------------------------
CreateCommand CreateTable():
{
	String tableName;
	List<CreateCommand.AttributeDescriptor> attributeDescriptors
			= new ArrayList<CreateCommand.AttributeDescriptor>();
	List<String> primaryKeyAttrNames = new ArrayList<String>();
	List<CreateCommand.ForeignKeyDescriptor> foreignKeyDescriptors
		 = new ArrayList<CreateCommand.ForeignKeyDescriptor>();

	CreateCommand.AttributeDescriptor attributeDescriptor;
	CreateCommand.ForeignKeyDescriptor foreignKeyDescriptor;

	String name;
	
	//System.out.println("CreateTable()");
}
{
	< KW_CREATE > < KW_TABLE > ( tableName = Identifier() )
	"("
	(
		(
			( attributeDescriptor = AttrDecl() ) ","
			{ attributeDescriptors.add(attributeDescriptor); }
		)+
		(			< KW_PRIMARY > < KW_KEY >
			"("
				( name = Identifier() { primaryKeyAttrNames.add(name); } )				( "," name = Identifier() { primaryKeyAttrNames.add(name); } )*
			")"
		)
		(
			"," ( foreignKeyDescriptor = ForeignKeyDecl() )
			{ foreignKeyDescriptors.add(foreignKeyDescriptor); }
		)*	)
	")"	{ return new CreateCommand(token, tableName, attributeDescriptors,
					primaryKeyAttrNames, foreignKeyDescriptors); }
}

CreateCommand.AttributeDescriptor AttrDecl():
{
	String name;
	Attribute.Type type;
	int length = -1;
	Exp constraint = null;

	//System.out.println("AttrDecl()");}{
	( name = Identifier() )
	(			
		(			< KW_INT > { type = Attribute.Type.INT; }
		)
	|	(
			< KW_CHAR > "(" < INT_LITERAL > { length=Integer.parseInt(token.image); } ")"			{ type = Attribute.Type.CHAR; } 		)
	|	(
			< KW_DECIMAL > { type = Attribute.Type.DECIMAL; }
		)
	)
	(
		// the constraint exp should have an expString generated
		< KW_CHECK >
		"(" (
				constraint = Expression()
		) ")"	)?
	{ return new CreateCommand.AttributeDescriptor(name, type, length, constraint); }}

CreateCommand.ForeignKeyDescriptor ForeignKeyDecl():
{	String refTableName;
	List<String> localAttrNames = new ArrayList<String>();
	List<String> refAttrNames = new ArrayList<String>();

	String name;
}
{
	< KW_FOREIGN > < KW_KEY >
	"("
	( name = Identifier() { localAttrNames.add(name); } )
	( "," name = Identifier() { localAttrNames.add(name); } )*
	")"
	< KW_REFERENCES >
	( refTableName = Identifier() )
	"("
	( name = Identifier() { refAttrNames.add(name); } )
	( "," name = Identifier() { refAttrNames.add(name); } )*
	")"
	{ return new CreateCommand.ForeignKeyDescriptor(
		refTableName, localAttrNames, refAttrNames); }}

// DROP TABLE table -----------------------------------------------------------
DropCommand DropTable():
{
	DropCommand ret;

	String name;
	
	//System.out.println("DropTable()");
}
{
	< KW_DROP > < KW_TABLE > ( name = Identifier() )
	{ ret = new DropCommand(token, name); }
	{ return ret; }
}


// SELECT attr0,... FROM table0,... WHERE conditions --------------------------
SelectCommand Select():
{
	List<String> attrNames = null;
	List<String> tables = new ArrayList<String>();
	Exp condition = null;

	String name;

	//System.out.println("Select()");
}
{
	< KW_SELECT >
	(	
		(			(
				( name = Identifier() )
				{
					attrNames = new ArrayList<String>();
					attrNames.add(name);
				}
			)
			( "," ( name = Identifier() ) { attrNames.add(name); } )*
		)
	|	< SYM_STAR >
	)
	< KW_FROM >
	( ( name = Identifier() ) { tables.add(name); } )
	( "," ( name = Identifier() ) { tables.add(name); } )*
	( < KW_WHERE > ( condition = Expression() ) )?
	{ return new SelectCommand(token, attrNames, tables, condition); }
}


// INSERT INTO table VALUES(val1,...) -----------------------------------------
InsertCommand Insert():
{
	String tableName;
	List<Exp> values = new ArrayList<Exp>();

	Exp value;
	
	//System.out.println("Insert()");
}
{
	< KW_INSERT > < KW_INTO > ( tableName = Identifier() )
	< KW_VALUES > "("
	( ( value = Expression() ) { values.add(value); } )
	( "," ( value = Expression() ) { values.add(value); } )*
	")"
	{ return new InsertCommand(token, tableName, values); }
}


// DELETE FROM table WHERE conditions -----------------------------------------
DeleteCommand Delete():
{
	String tableName;
	Exp condition = null;
	
	//System.out.println("Delete()");
}
{
	< KW_DELETE > < KW_FROM >	( tableName = Identifier() )
	( < KW_WHERE > ( condition = Expression() ) )?
	{ return new DeleteCommand(token, tableName, condition); }
}


// UPDATE table SET attr1=val1, ... WHERE conditions --------------------------
UpdateCommand Update():
{
	String tableName;
	List<UpdateCommand.UpdateDescriptor > updateDescriptors
		= new ArrayList<UpdateCommand.UpdateDescriptor>();
	Exp condition = null;

	UpdateCommand.UpdateDescriptor updateDescriptor;

	//System.out.println("Update()");
}
{
	< KW_UPDATE > ( tableName = Identifier() )	< KW_SET > ( ( updateDescriptor = AttributeAssg() ) { updateDescriptors.add(updateDescriptor); } )	( "," ( updateDescriptor = AttributeAssg() ) { updateDescriptors.add(updateDescriptor); } )*
	( < KW_WHERE > ( condition = Expression() ) )?
	{ return new UpdateCommand(token, tableName, updateDescriptors, condition); }
}

UpdateCommand.UpdateDescriptor AttributeAssg():
{
	String attrName;
	Exp value;
	//System.out.println("AttributeAssignr()");}
{
	( attrName = Identifier() )	< SYM_EQUAL > ( value = Expression() )
	{ return new UpdateCommand.UpdateDescriptor(attrName, value); }}


// HELP TABLES ----------------------------------------------------------------
HelpTablesCommand HelpTables_suffix():
{
	//System.out.println("HelpTables()");
}
{
	< KW_TABLES >	{ return new HelpTablesCommand(token); }
}

// HELP DESCRIBE table --------------------------------------------------------
HelpDescribeCommand HelpDescribe_suffix():
{
	HelpDescribeCommand ret;
	String tableName;
	//System.out.println("HelpDescribe()");
}
{
	< KW_DESCRIBE > ( tableName = Identifier() )
	{ ret = new HelpDescribeCommand(token, tableName); }
	{ return ret; }
}


// HELP command ---------------------------------------------------------------
HelpCommandCommand HelpCommand_suffix():
{
	HelpCommandCommand.Type type;
	//System.out.println("HelpCommand()");
}
{
	(
		(			< KW_CREATE > < KW_TABLE >
			{ type = HelpCommandCommand.Type.CREATE_TABLE; }
		)
	|	(
			< KW_DROP > < KW_TABLE >
			{ type = HelpCommandCommand.Type.DROP_TABLE; }
		)
	|	(
			< KW_SELECT >
			{ type = HelpCommandCommand.Type.SELECT; }
		)
	|	(
			< KW_INSERT >
			{ type = HelpCommandCommand.Type.INSERT; }
		)
	|	(
			< KW_DELETE >
			{ type = HelpCommandCommand.Type.DELETE; }
		)
	|	(
			< KW_UPDATE >
			{ type = HelpCommandCommand.Type.UPDATE; }
		)
	)
	{ return new HelpCommandCommand(token, type); }
}


// QUIT -----------------------------------------------------------------------
QuitCommand Quit():
{
	//System.out.println("Quit()");
}
{
	< KW_QUIT >	{ return new QuitCommand(token); }
}


// Expression from disk *******************************************************

Exp ExpressionFromDisk():
{
	Exp ret;
}
{
	( ret = Expression() ) < EOF >
	{ return ret; }
}	

// Expression *****************************************************************

Exp Expression():
{
	Exp ret;
	//System.out.println("Expression()");
}
{
	{ Exp.clearGlobalExpString(); }
	ret = LogicOp()
	{ ret.saveExpString();  return ret; }
}


// CmpOp AND CmpOp OR CmpOp AND CmpOp ... left-binding
Exp LogicOp():
{
	Exp ret;
	BinaryExp postfix;
	//System.out.println("LogicOp()");
}
{
	( ret = CmpOp() )
	(
		( postfix = LogicOp_postfix() )
		{ postfix.setLeft(ret);  ret = postfix; }
	)*
	{ return ret; }
}
BinaryExp LogicOp_postfix():
{
	Token op;
	Exp right;
	//System.out.println("LogicOp_postfix()");
}
{
	( < KW_AND > | < KW_OR > )
	{ op = token;  Exp.appendToGlobalExpString(" "+token.image.toUpperCase()+" "); }
	( right = CmpOp() )
	{ return new BinaryExp(null, op, right); }
}


// AddOp < AddOp = AddOp != AddOp >= AddOp ... left-binding
Exp CmpOp():
{
	Exp ret;
	BinaryExp postfix;
	//System.out.println("CmpOp()");
}
{
	( ret = AddOp() )
	(
		( postfix = CmpOp_postfix() )
		{ postfix.setLeft(ret);  ret = postfix; }
	)*
	{ return ret; }
}
BinaryExp CmpOp_postfix():
{
	Token op;
	Exp right;
	//System.out.println("CmpOp_postfix()");
}
{
	( < SYM_LESS > | < SYM_LESSEQUAL > | < SYM_EQUAL >
	| < SYM_EXCLEQUAL > | < SYM_MORE > | < SYM_MOREEQUAL > )
	{ op =  token;  Exp.appendToGlobalExpString(token.image); }
	( right = AddOp() )
	{ return new BinaryExp(null, op, right); }
}


// MulOp + MulOp - MulOp ... left-binding 
Exp AddOp():
{
	Exp ret;
	BinaryExp postfix;
	//System.out.println("AddOp()");
}
{
	( ret = MulOp() )
	(
		( postfix = AddOp_postfix() )
		{ postfix.setLeft(ret);  ret = postfix; }
	)*
	{ return ret; }
}
BinaryExp AddOp_postfix():
{
	Token op;
	Exp right;
	//System.out.println("AddOp_postfix()");
}
{
	( < SYM_PLUS > | < SYM_MINUS > )
	{ op = token;  Exp.appendToGlobalExpString(token.image); }
	( right = MulOp() )
	{ return new BinaryExp(null, op, right); }
}


// UnaryOp * UnaryOp / UnaryOp * UnaryOp ... left-binding
Exp MulOp():
{
	Exp ret;
	BinaryExp postfix;
	//System.out.println("MulOp()");
}
{
	( ret = UnaryOp() )
	(
		( postfix = MulOp_postfix() )
		{ postfix.setLeft(ret);  ret = postfix; }
	)*
	{ return ret; }
}
BinaryExp MulOp_postfix():
{
	Token op;
	Exp right;
	//System.out.println("MulOp_postfix()");
}
{
	( < SYM_STAR > | < SYM_SLASH > )
	{ op = token;  Exp.appendToGlobalExpString(token.image); }
	( right = UnaryOp() )
	{ return new BinaryExp(null, op, right); }
}


// +PrimaryExp, -PrimaryExp
Exp UnaryOp():
{
	Exp ret;
	Exp sub;
	Token op;
	//System.out.println("UnaryOp()");
}
{
	(		(			
			( < SYM_PLUS > | < SYM_MINUS > )
			{ op = token;  Exp.appendToGlobalExpString(token.image); }					( sub = PrimaryExp() )
			{ ret = new UnaryExp(token, op, sub); }
		)
	|	(
			( ret = PrimaryExp() )
		)
	)
	{ return ret; }
}


Exp PrimaryExp():
{
	Exp ret;
	//System.out.println("PrimaryExp()");

	String name;
}
{
	(
		(
			< DECIMAL_LITERAL >	// put this before INT_LITERAL since INT_LITERAL is a substring
			{ ret = new LiteralExp(token, Double.parseDouble(token.image));
			Exp.appendToGlobalExpString(token.image); }
		)
	|	(
			< INT_LITERAL >
			{ ret = new LiteralExp(token, Integer.parseInt(token.image));
			Exp.appendToGlobalExpString(token.image); }
		)
	|	(
			< STRING_LITERAL > 
			{ ret = new LiteralExp(token, LiteralExp.processStringLiteral(token.image));
			Exp.appendToGlobalExpString(token.image);
			}
		)
	|	(
			( name = Identifier() )
			{ret = new AttributeExp(token, name);
			Exp.appendToGlobalExpString(name); }
		)
	|	(
			"(" { Exp.appendToGlobalExpString('('); }			( ret = LogicOp() )
			")" { Exp.appendToGlobalExpString(')'); }
		)
	)
	{ return ret; }
}


String Identifier():
{}
{
	< IDENTIFIER >
	{ return token.image.toUpperCase(); }
}