/* Generated By:JavaCC: Do not edit this line. SQLParser.java */
        package parser;

        import java.util.*;
        import ast.*;
        import database.*;

        public class SQLParser implements SQLParserConstants {

/*
TOKEN:
{	< COMMAND_FOLLOW: ";"([" ", "\t", "\f", "\r"])*"\n" >
|	< COMMAND_FOLLOW_ERROR: ";"(~["\n"])*"\n" >
}
*/


// Grammar --------------------------------------------------------------------
  final public Command Command() throws ParseException {
        Command ret;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KW_CREATE:
      ret = CreateTable();
      break;
    case KW_DROP:
      ret = DropTable();
      break;
    case KW_SELECT:
      ret = Select();
      break;
    case KW_INSERT:
      ret = Insert();
      break;
    case KW_DELETE:
      ret = Delete();
      break;
    case KW_UPDATE:
      ret = Update();
      break;
    case KW_HELP:
      jj_consume_token(KW_HELP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KW_TABLES:
        ret = HelpTables_suffix();
        break;
      case KW_DESCRIBE:
        ret = HelpDescribe_suffix();
        break;
      case KW_CREATE:
      case KW_DROP:
      case KW_SELECT:
      case KW_INSERT:
      case KW_DELETE:
      case KW_UPDATE:
        ret = HelpCommand_suffix();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case KW_QUIT:
      ret = Quit();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(48);
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// CREATE TABLE ( ... ) -------------------------------------------------------
  final public CreateCommand CreateTable() throws ParseException {
        String tableName;
        List<CreateCommand.AttributeDescriptor> attributeDescriptors
                        = new ArrayList<CreateCommand.AttributeDescriptor>();
        List<String> primaryKeyAttrNames = new ArrayList<String>();
        List<CreateCommand.ForeignKeyDescriptor> foreignKeyDescriptors
                 = new ArrayList<CreateCommand.ForeignKeyDescriptor>();

        CreateCommand.AttributeDescriptor attributeDescriptor;
        CreateCommand.ForeignKeyDescriptor foreignKeyDescriptor;

        String name;
    jj_consume_token(KW_CREATE);
    jj_consume_token(KW_TABLE);
    tableName = Identifier();
    jj_consume_token(49);
    label_1:
    while (true) {
      attributeDescriptor = AttrDecl();
      jj_consume_token(50);
                          attributeDescriptors.add(attributeDescriptor);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(KW_PRIMARY);
    jj_consume_token(KW_KEY);
    jj_consume_token(49);
    name = Identifier();
                                                        primaryKeyAttrNames.add(name);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 50:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(50);
      name = Identifier();
                                                            primaryKeyAttrNames.add(name);
    }
    jj_consume_token(51);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 50:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      jj_consume_token(50);
      foreignKeyDescriptor = ForeignKeyDecl();
                          foreignKeyDescriptors.add(foreignKeyDescriptor);
    }
    jj_consume_token(51);
          {if (true) return new CreateCommand(token, tableName, attributeDescriptors,
                                        primaryKeyAttrNames, foreignKeyDescriptors);}
    throw new Error("Missing return statement in function");
  }

  final public CreateCommand.AttributeDescriptor AttrDecl() throws ParseException {
        String name;
        Attribute.Type type;
        int length = -1;
        Exp constraint = null;
    name = Identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KW_INT:
      jj_consume_token(KW_INT);
                                     type = Attribute.Type.INT;
      break;
    case KW_CHAR:
      jj_consume_token(KW_CHAR);
      jj_consume_token(49);
      jj_consume_token(INT_LITERAL);
                                                          length=Integer.parseInt(token.image);
      jj_consume_token(51);
                          type = Attribute.Type.CHAR;
      break;
    case KW_DECIMAL:
      jj_consume_token(KW_DECIMAL);
                                         type = Attribute.Type.DECIMAL;
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KW_CHECK:
      jj_consume_token(KW_CHECK);
      jj_consume_token(49);
      constraint = Expression();
      jj_consume_token(51);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
          {if (true) return new CreateCommand.AttributeDescriptor(name, type, length, constraint);}
    throw new Error("Missing return statement in function");
  }

  final public CreateCommand.ForeignKeyDescriptor ForeignKeyDecl() throws ParseException {
        String refTableName;
        List<String> localAttrNames = new ArrayList<String>();
        List<String> refAttrNames = new ArrayList<String>();

        String name;
    jj_consume_token(KW_FOREIGN);
    jj_consume_token(KW_KEY);
    jj_consume_token(49);
    name = Identifier();
                                localAttrNames.add(name);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 50:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      jj_consume_token(50);
      name = Identifier();
                                    localAttrNames.add(name);
    }
    jj_consume_token(51);
    jj_consume_token(KW_REFERENCES);
    refTableName = Identifier();
    jj_consume_token(49);
    name = Identifier();
                                refAttrNames.add(name);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 50:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_5;
      }
      jj_consume_token(50);
      name = Identifier();
                                    refAttrNames.add(name);
    }
    jj_consume_token(51);
          {if (true) return new CreateCommand.ForeignKeyDescriptor(
                refTableName, localAttrNames, refAttrNames);}
    throw new Error("Missing return statement in function");
  }

// DROP TABLE table -----------------------------------------------------------
  final public DropCommand DropTable() throws ParseException {
        DropCommand ret;

        String name;
    jj_consume_token(KW_DROP);
    jj_consume_token(KW_TABLE);
    name = Identifier();
          ret = new DropCommand(token, name);
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// SELECT attr0,... FROM table0,... WHERE conditions --------------------------
  final public SelectCommand Select() throws ParseException {
        List<String> attrNames = null;
        List<String> tables = new ArrayList<String>();
        Exp condition = null;

        String name;
    jj_consume_token(KW_SELECT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      name = Identifier();
                                        attrNames = new ArrayList<String>();
                                        attrNames.add(name);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 50:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_6;
        }
        jj_consume_token(50);
        name = Identifier();
                                                        attrNames.add(name);
      }
      break;
    case SYM_STAR:
      jj_consume_token(SYM_STAR);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(KW_FROM);
    name = Identifier();
                                    tables.add(name);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 50:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_7;
      }
      jj_consume_token(50);
      name = Identifier();
                                        tables.add(name);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KW_WHERE:
      jj_consume_token(KW_WHERE);
      condition = Expression();
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
          {if (true) return new SelectCommand(token, attrNames, tables, condition);}
    throw new Error("Missing return statement in function");
  }

// INSERT INTO table VALUES(val1,...) -----------------------------------------
  final public InsertCommand Insert() throws ParseException {
        String tableName;
        List<Exp> values = new ArrayList<Exp>();

        Exp value;
    jj_consume_token(KW_INSERT);
    jj_consume_token(KW_INTO);
    tableName = Identifier();
    jj_consume_token(KW_VALUES);
    jj_consume_token(49);
    value = Expression();
                                     values.add(value);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 50:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_8;
      }
      jj_consume_token(50);
      value = Expression();
                                         values.add(value);
    }
    jj_consume_token(51);
          {if (true) return new InsertCommand(token, tableName, values);}
    throw new Error("Missing return statement in function");
  }

// DELETE FROM table WHERE conditions -----------------------------------------
  final public DeleteCommand Delete() throws ParseException {
        String tableName;
        Exp conditions;
    jj_consume_token(KW_DELETE);
    jj_consume_token(KW_FROM);
    tableName = Identifier();
    jj_consume_token(KW_WHERE);
    conditions = Expression();
          {if (true) return new DeleteCommand(token, tableName, conditions);}
    throw new Error("Missing return statement in function");
  }

// UPDATE table SET attr1=val1, ... WHERE conditions --------------------------
  final public UpdateCommand Update() throws ParseException {
        String tableName;
        List<AttributeAssign > assignments = new ArrayList<AttributeAssign>();
        Exp conditions;

        AttributeAssign assignment;
    jj_consume_token(KW_UPDATE);
    tableName = Identifier();
    jj_consume_token(KW_SET);
    assignment = AttributeAssignr();
                                                           assignments.add(assignment);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 50:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_9;
      }
      jj_consume_token(50);
      assignment = AttributeAssignr();
                                                    assignments.add(assignment);
    }
    jj_consume_token(KW_WHERE);
    conditions = Expression();
          {if (true) return new UpdateCommand(token, tableName, assignments, conditions);}
    throw new Error("Missing return statement in function");
  }

  final public AttributeAssign AttributeAssignr() throws ParseException {
        AttributeExp target;
        Exp value;
        //System.out.println("AttributeAssignr()");

        String name;
    name = Identifier();
                                  target = new AttributeExp(token, name);
    jj_consume_token(SYM_EQUAL);
    value = Expression();
          {if (true) return new AttributeAssign(token, target, value);}
    throw new Error("Missing return statement in function");
  }

// HELP TABLES ----------------------------------------------------------------
  final public HelpTablesCommand HelpTables_suffix() throws ParseException {
    jj_consume_token(KW_TABLES);
          {if (true) return new HelpTablesCommand(token);}
    throw new Error("Missing return statement in function");
  }

// HELP DESCRIBE table --------------------------------------------------------
  final public HelpDescribeCommand HelpDescribe_suffix() throws ParseException {
        HelpDescribeCommand ret;
        String tableName;
    jj_consume_token(KW_DESCRIBE);
    tableName = Identifier();
          ret = new HelpDescribeCommand(token, tableName);
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// HELP command ---------------------------------------------------------------
  final public HelpCommandCommand HelpCommand_suffix() throws ParseException {
        HelpCommandCommand.Type type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KW_CREATE:
      jj_consume_token(KW_CREATE);
      jj_consume_token(KW_TABLE);
                          type = HelpCommandCommand.Type.CREATE_TABLE;
      break;
    case KW_DROP:
      jj_consume_token(KW_DROP);
      jj_consume_token(KW_TABLE);
                          type = HelpCommandCommand.Type.DROP_TABLE;
      break;
    case KW_SELECT:
      jj_consume_token(KW_SELECT);
                          type = HelpCommandCommand.Type.SELECT;
      break;
    case KW_INSERT:
      jj_consume_token(KW_INSERT);
                          type = HelpCommandCommand.Type.INSERT;
      break;
    case KW_DELETE:
      jj_consume_token(KW_DELETE);
                          type = HelpCommandCommand.Type.DELETE;
      break;
    case KW_UPDATE:
      jj_consume_token(KW_UPDATE);
                          type = HelpCommandCommand.Type.UPDATE;
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return new HelpCommandCommand(token, type);}
    throw new Error("Missing return statement in function");
  }

// QUIT -----------------------------------------------------------------------
  final public QuitCommand Quit() throws ParseException {
    jj_consume_token(KW_QUIT);
          {if (true) return new QuitCommand(token);}
    throw new Error("Missing return statement in function");
  }

// Expression from disk *******************************************************
  final public Exp ExpressionFromDisk() throws ParseException {
        Exp ret;
    ret = Expression();
    jj_consume_token(0);
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// Expression *****************************************************************
  final public Exp Expression() throws ParseException {
        Exp ret;
          Exp.clearGlobalExpString();
    ret = LogicOp();
          ret.saveExpString();  {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// CmpOp AND CmpOp OR CmpOp AND CmpOp ... left-binding
  final public Exp LogicOp() throws ParseException {
        Exp ret;
        BinaryExp postfix;
    ret = CmpOp();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KW_AND:
      case KW_OR:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_10;
      }
      postfix = LogicOp_postfix();
                  postfix.setLeft(ret);  ret = postfix;
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public BinaryExp LogicOp_postfix() throws ParseException {
        Token op;
        Exp right;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KW_AND:
      jj_consume_token(KW_AND);
      break;
    case KW_OR:
      jj_consume_token(KW_OR);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          op = token;  Exp.appendToGlobalExpString(" "+token.image.toUpperCase()+" ");
    right = CmpOp();
          {if (true) return new BinaryExp(null, op, right);}
    throw new Error("Missing return statement in function");
  }

// AddOp < AddOp = AddOp != AddOp >= AddOp ... left-binding
  final public Exp CmpOp() throws ParseException {
        Exp ret;
        BinaryExp postfix;
    ret = AddOp();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SYM_EQUAL:
      case SYM_EXCLEQUAL:
      case SYM_LESS:
      case SYM_MORE:
      case SYM_LESSEQUAL:
      case SYM_MOREEQUAL:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_11;
      }
      postfix = CmpOp_postfix();
                  postfix.setLeft(ret);  ret = postfix;
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public BinaryExp CmpOp_postfix() throws ParseException {
        Token op;
        Exp right;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SYM_LESS:
      jj_consume_token(SYM_LESS);
      break;
    case SYM_LESSEQUAL:
      jj_consume_token(SYM_LESSEQUAL);
      break;
    case SYM_EQUAL:
      jj_consume_token(SYM_EQUAL);
      break;
    case SYM_EXCLEQUAL:
      jj_consume_token(SYM_EXCLEQUAL);
      break;
    case SYM_MORE:
      jj_consume_token(SYM_MORE);
      break;
    case SYM_MOREEQUAL:
      jj_consume_token(SYM_MOREEQUAL);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          op =  token;  Exp.appendToGlobalExpString(token.image);
    right = AddOp();
          {if (true) return new BinaryExp(null, op, right);}
    throw new Error("Missing return statement in function");
  }

// MulOp + MulOp - MulOp ... left-binding 
  final public Exp AddOp() throws ParseException {
        Exp ret;
        BinaryExp postfix;
    ret = MulOp();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SYM_PLUS:
      case SYM_MINUS:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_12;
      }
      postfix = AddOp_postfix();
                  postfix.setLeft(ret);  ret = postfix;
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public BinaryExp AddOp_postfix() throws ParseException {
        Token op;
        Exp right;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SYM_PLUS:
      jj_consume_token(SYM_PLUS);
      break;
    case SYM_MINUS:
      jj_consume_token(SYM_MINUS);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          op = token;  Exp.appendToGlobalExpString(token.image);
    right = MulOp();
          {if (true) return new BinaryExp(null, op, right);}
    throw new Error("Missing return statement in function");
  }

// UnaryOp * UnaryOp / UnaryOp * UnaryOp ... left-binding
  final public Exp MulOp() throws ParseException {
        Exp ret;
        BinaryExp postfix;
    ret = UnaryOp();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SYM_STAR:
      case SYM_SLASH:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_13;
      }
      postfix = MulOp_postfix();
                  postfix.setLeft(ret);  ret = postfix;
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public BinaryExp MulOp_postfix() throws ParseException {
        Token op;
        Exp right;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SYM_STAR:
      jj_consume_token(SYM_STAR);
      break;
    case SYM_SLASH:
      jj_consume_token(SYM_SLASH);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          op = token;  Exp.appendToGlobalExpString(token.image);
    right = UnaryOp();
          {if (true) return new BinaryExp(null, op, right);}
    throw new Error("Missing return statement in function");
  }

// +PrimaryExp, -PrimaryExp
  final public Exp UnaryOp() throws ParseException {
        Exp ret;
        Exp sub;
        Token op;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SYM_PLUS:
    case SYM_MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SYM_PLUS:
        jj_consume_token(SYM_PLUS);
        break;
      case SYM_MINUS:
        jj_consume_token(SYM_MINUS);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                          op = token;  Exp.appendToGlobalExpString(token.image);
      sub = PrimaryExp();
                          ret = new UnaryExp(token, op, sub);
      break;
    case IDENTIFIER:
    case INT_LITERAL:
    case DECIMAL_LITERAL:
    case STRING_LITERAL:
    case 49:
      ret = PrimaryExp();
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Exp PrimaryExp() throws ParseException {
        Exp ret;
        //System.out.println("PrimaryExp()");

        String name;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECIMAL_LITERAL:
      jj_consume_token(DECIMAL_LITERAL);
                          ret = new LiteralExp(token, Double.parseDouble(token.image));
                        Exp.appendToGlobalExpString(token.image);
      break;
    case INT_LITERAL:
      jj_consume_token(INT_LITERAL);
                          ret = new LiteralExp(token, Integer.parseInt(token.image));
                        Exp.appendToGlobalExpString(token.image);
      break;
    case STRING_LITERAL:
      jj_consume_token(STRING_LITERAL);
                          ret = new LiteralExp(token, LiteralExp.processStringLiteral(token.image));
                        Exp.appendToGlobalExpString(token.image);
      break;
    case IDENTIFIER:
      name = Identifier();
                         ret = new AttributeExp(token, name);
                        Exp.appendToGlobalExpString(name);
      break;
    case 49:
      jj_consume_token(49);
                              Exp.appendToGlobalExpString('(');
      ret = LogicOp();
      jj_consume_token(51);
                              Exp.appendToGlobalExpString(')');
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public String Identifier() throws ParseException {
    jj_consume_token(IDENTIFIER);
          {if (true) return token.image.toUpperCase();}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public SQLParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[27];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x33250400,0x4b250400,0x0,0x0,0x0,0x80000000,0x800,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x3250400,0x300,0x300,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x1000,0x40000,0x40000,0x3,0x0,0x40000,0x40000,0x40000,0x1010,0x40000,0x0,0x40000,0x40000,0x0,0x0,0x0,0xfc0,0xfc0,0xc,0xc,0x30,0x30,0xc,0x2f00c,0x2f000,};
   }

  /** Constructor with InputStream. */
  public SQLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SQLParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SQLParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new SQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SQLParser(SQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[52];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 27; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 52; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

        }
